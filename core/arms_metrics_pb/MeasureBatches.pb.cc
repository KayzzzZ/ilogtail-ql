// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MeasureBatches.proto

#include "MeasureBatches.pb.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace arms_metrics {
PROTOBUF_CONSTEXPR MeasureBatches::MeasureBatches(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.measurebatches_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}} {
}
struct MeasureBatchesDefaultTypeInternal {
    PROTOBUF_CONSTEXPR MeasureBatchesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
    ~MeasureBatchesDefaultTypeInternal() {}
    union {
        MeasureBatches _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasureBatchesDefaultTypeInternal
    _MeasureBatches_default_instance_;
PROTOBUF_CONSTEXPR
MeasureBatch_CommonTagsEntry_DoNotUse::MeasureBatch_CommonTagsEntry_DoNotUse(::_pbi::ConstantInitialized) {
}
struct MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal {
    PROTOBUF_CONSTEXPR MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal()
        : _instance(::_pbi::ConstantInitialized{}) {}
    ~MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal() {}
    union {
        MeasureBatch_CommonTagsEntry_DoNotUse _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    MeasureBatch_CommonTagsEntry_DoNotUseDefaultTypeInternal _MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MeasureBatch::MeasureBatch(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.commontags_)*/ {::_pbi::ConstantInitialized()},
             /*decltype(_impl_.measures_)*/ {},
             /*decltype(_impl_.version_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.type_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.pid_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.ip_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.time_)*/ int64_t{0},
             /*decltype(_impl_._cached_size_)*/ {}} {
}
struct MeasureBatchDefaultTypeInternal {
    PROTOBUF_CONSTEXPR MeasureBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
    ~MeasureBatchDefaultTypeInternal() {}
    union {
        MeasureBatch _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasureBatchDefaultTypeInternal
    _MeasureBatch_default_instance_;
PROTOBUF_CONSTEXPR Measures_LabelsEntry_DoNotUse::Measures_LabelsEntry_DoNotUse(::_pbi::ConstantInitialized) {
}
struct Measures_LabelsEntry_DoNotUseDefaultTypeInternal {
    PROTOBUF_CONSTEXPR Measures_LabelsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
    ~Measures_LabelsEntry_DoNotUseDefaultTypeInternal() {}
    union {
        Measures_LabelsEntry_DoNotUse _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    Measures_LabelsEntry_DoNotUseDefaultTypeInternal _Measures_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Measures::Measures(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.labels_)*/ {::_pbi::ConstantInitialized()},
             /*decltype(_impl_.measures_)*/ {},
             /*decltype(_impl_._cached_size_)*/ {}} {
}
struct MeasuresDefaultTypeInternal {
    PROTOBUF_CONSTEXPR MeasuresDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
    ~MeasuresDefaultTypeInternal() {}
    union {
        Measures _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasuresDefaultTypeInternal
    _Measures_default_instance_;
PROTOBUF_CONSTEXPR Measure::Measure(::_pbi::ConstantInitialized)
    : _impl_{/*decltype(_impl_.valuetype_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.name_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.desc_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}},
             /*decltype(_impl_.value_)*/ 0,
             /*decltype(_impl_.unit_)*/ 0,
             /*decltype(_impl_._cached_size_)*/ {}} {
}
struct MeasureDefaultTypeInternal {
    PROTOBUF_CONSTEXPR MeasureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
    ~MeasureDefaultTypeInternal() {}
    union {
        Measure _instance;
    };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeasureDefaultTypeInternal
    _Measure_default_instance_;
} // namespace arms_metrics
static ::_pb::Metadata file_level_metadata_MeasureBatches_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MeasureBatches_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MeasureBatches_2eproto = nullptr;

const uint32_t TableStruct_MeasureBatches_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatches, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatches, _impl_.measurebatches_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch_CommonTagsEntry_DoNotUse, value_),
    0,
    1,
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.ip_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.commontags_),
    PROTOBUF_FIELD_OFFSET(::proto::MeasureBatch, _impl_.measures_),
    PROTOBUF_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::proto::Measures_LabelsEntry_DoNotUse, value_),
    0,
    1,
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::proto::Measures, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::proto::Measures, _impl_.labels_),
    PROTOBUF_FIELD_OFFSET(::proto::Measures, _impl_.measures_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::proto::Measure, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::proto::Measure, _impl_.valuetype_),
    PROTOBUF_FIELD_OFFSET(::proto::Measure, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::proto::Measure, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::proto::Measure, _impl_.unit_),
    PROTOBUF_FIELD_OFFSET(::proto::Measure, _impl_.desc_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::proto::MeasureBatches)},
    {7, 15, -1, sizeof(::proto::MeasureBatch_CommonTagsEntry_DoNotUse)},
    {17, -1, -1, sizeof(::proto::MeasureBatch)},
    {30, 38, -1, sizeof(::proto::Measures_LabelsEntry_DoNotUse)},
    {40, -1, -1, sizeof(::proto::Measures)},
    {48, -1, -1, sizeof(::proto::Measure)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::proto::_MeasureBatches_default_instance_._instance,
    &::proto::_MeasureBatch_CommonTagsEntry_DoNotUse_default_instance_._instance,
    &::proto::_MeasureBatch_default_instance_._instance,
    &::proto::_Measures_LabelsEntry_DoNotUse_default_instance_._instance,
    &::proto::_Measures_default_instance_._instance,
    &::proto::_Measure_default_instance_._instance,
};

const char descriptor_table_protodef_MeasureBatches_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold)
    = "\n\024MeasureBatches.proto\022\005proto\"=\n\016Measure"
      "Batches\022+\n\016measureBatches\030\001 \003(\0132\023.proto."
      "MeasureBatch\"\343\001\n\014MeasureBatch\022\017\n\007version"
      "\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\014\n\004time\030\003 \001(\003\022\013\n\003pi"
      "d\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\0227\n\ncommonTags\030\006 \003(\0132"
      "#.proto.MeasureBatch.CommonTagsEntry\022!\n\010"
      "measures\030\007 \003(\0132\017.proto.Measures\0321\n\017Commo"
      "nTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
      "8\001\"\210\001\n\010Measures\022+\n\006labels\030\001 \003(\0132\033.proto."
      "Measures.LabelsEntry\022 \n\010measures\030\002 \003(\0132\016"
      ".proto.Measure\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"f\n\007Measure\022\021\n\tvalu"
      "eType\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r\n\005value\030\003 \001(\001"
      "\022\035\n\004unit\030\004 \001(\0162\017.proto.EnumUnit\022\014\n\004desc\030"
      "\005 \001(\t*b\n\010EnumUnit\022\013\n\007UNKNOWN\020\000\022\t\n\005COUNT\020"
      "\001\022\t\n\005RATIO\020\002\022\013\n\007PERCENT\020\003\022\010\n\004BYTE\020\004\022\n\n\006S"
      "ECOND\020\005\022\020\n\014MILLISECONDS\020\006B\rZ\013../protobuf"
      "b\006proto3";
static ::_pbi::once_flag descriptor_table_MeasureBatches_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MeasureBatches_2eproto = {
    false,
    false,
    688,
    descriptor_table_protodef_MeasureBatches_2eproto,
    "MeasureBatches.proto",
    &descriptor_table_MeasureBatches_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_MeasureBatches_2eproto::offsets,
    file_level_metadata_MeasureBatches_2eproto,
    file_level_enum_descriptors_MeasureBatches_2eproto,
    file_level_service_descriptors_MeasureBatches_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MeasureBatches_2eproto_getter() {
    return &descriptor_table_MeasureBatches_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner
    dynamic_init_dummy_MeasureBatches_2eproto(&descriptor_table_MeasureBatches_2eproto);
namespace arms_metrics {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnumUnit_descriptor() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto);
    return file_level_enum_descriptors_MeasureBatches_2eproto[0];
}
bool EnumUnit_IsValid(int value) {
    switch (value) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            return true;
        default:
            return false;
    }
}


// ===================================================================

class MeasureBatches::_Internal {
public:
};

MeasureBatches::MeasureBatches(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:proto.MeasureBatches)
}
MeasureBatches::MeasureBatches(const MeasureBatches& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
    MeasureBatches* const _this = this;
    (void)_this;
    new (&_impl_)
        Impl_{decltype(_impl_.measurebatches_){from._impl_.measurebatches_}, /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:proto.MeasureBatches)
}

inline void MeasureBatches::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{decltype(_impl_.measurebatches_){arena}, /*decltype(_impl_._cached_size_)*/ {}};
}

MeasureBatches::~MeasureBatches() {
    // @@protoc_insertion_point(destructor:proto.MeasureBatches)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void MeasureBatches::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.measurebatches_.~RepeatedPtrField();
}

void MeasureBatches::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void MeasureBatches::Clear() {
    // @@protoc_insertion_point(message_clear_start:proto.MeasureBatches)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.measurebatches_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasureBatches::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // repeated .proto.MeasureBatch measureBatches = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_measurebatches(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(), ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* MeasureBatches::_InternalSerialize(uint8_t* target,
                                            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:proto.MeasureBatches)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated .proto.MeasureBatch measureBatches = 1;
    for (unsigned i = 0, n = static_cast<unsigned>(this->_internal_measurebatches_size()); i < n; i++) {
        const auto& repfield = this->_internal_measurebatches(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proto.MeasureBatches)
    return target;
}

size_t MeasureBatches::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proto.MeasureBatches)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .proto.MeasureBatch measureBatches = 1;
    total_size += 1UL * this->_internal_measurebatches_size();
    for (const auto& msg : this->_impl_.measurebatches_) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasureBatches::_class_data_
    = {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, MeasureBatches::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MeasureBatches::GetClassData() const {
    return &_class_data_;
}


void MeasureBatches::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                               const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<MeasureBatches*>(&to_msg);
    auto& from = static_cast<const MeasureBatches&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:proto.MeasureBatches)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_impl_.measurebatches_.MergeFrom(from._impl_.measurebatches_);
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasureBatches::CopyFrom(const MeasureBatches& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proto.MeasureBatches)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MeasureBatches::IsInitialized() const {
    return true;
}

void MeasureBatches::InternalSwap(MeasureBatches* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    _impl_.measurebatches_.InternalSwap(&other->_impl_.measurebatches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasureBatches::GetMetadata() const {
    return ::_pbi::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto_getter,
                                     &descriptor_table_MeasureBatches_2eproto_once,
                                     file_level_metadata_MeasureBatches_2eproto[0]);
}

// ===================================================================

MeasureBatch_CommonTagsEntry_DoNotUse::MeasureBatch_CommonTagsEntry_DoNotUse() {
}
MeasureBatch_CommonTagsEntry_DoNotUse::MeasureBatch_CommonTagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {
}
void MeasureBatch_CommonTagsEntry_DoNotUse::MergeFrom(const MeasureBatch_CommonTagsEntry_DoNotUse& other) {
    MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MeasureBatch_CommonTagsEntry_DoNotUse::GetMetadata() const {
    return ::_pbi::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto_getter,
                                     &descriptor_table_MeasureBatches_2eproto_once,
                                     file_level_metadata_MeasureBatches_2eproto[1]);
}

// ===================================================================

class MeasureBatch::_Internal {
public:
};

MeasureBatch::MeasureBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    if (arena != nullptr && !is_message_owned) {
        arena->OwnCustomDestructor(this, &MeasureBatch::ArenaDtor);
    }
    // @@protoc_insertion_point(arena_constructor:proto.MeasureBatch)
}
MeasureBatch::MeasureBatch(const MeasureBatch& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
    MeasureBatch* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{/*decltype(_impl_.commontags_)*/ {},
                        decltype(_impl_.measures_){from._impl_.measures_},
                        decltype(_impl_.version_){},
                        decltype(_impl_.type_){},
                        decltype(_impl_.pid_){},
                        decltype(_impl_.ip_){},
                        decltype(_impl_.time_){},
                        /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    _this->_impl_.commontags_.MergeFrom(from._impl_.commontags_);
    _impl_.version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_version().empty()) {
        _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
    }
    _impl_.type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_type().empty()) {
        _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
    }
    _impl_.pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_pid().empty()) {
        _this->_impl_.pid_.Set(from._internal_pid(), _this->GetArenaForAllocation());
    }
    _impl_.ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_ip().empty()) {
        _this->_impl_.ip_.Set(from._internal_ip(), _this->GetArenaForAllocation());
    }
    _this->_impl_.time_ = from._impl_.time_;
    // @@protoc_insertion_point(copy_constructor:proto.MeasureBatch)
}

inline void MeasureBatch::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{/*decltype(_impl_.commontags_)*/ {::_pbi::ArenaInitialized(), arena},
                        decltype(_impl_.measures_){arena},
                        decltype(_impl_.version_){},
                        decltype(_impl_.type_){},
                        decltype(_impl_.pid_){},
                        decltype(_impl_.ip_){},
                        decltype(_impl_.time_){int64_t{0}},
                        /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MeasureBatch::~MeasureBatch() {
    // @@protoc_insertion_point(destructor:proto.MeasureBatch)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        ArenaDtor(this);
        return;
    }
    SharedDtor();
}

inline void MeasureBatch::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.commontags_.Destruct();
    _impl_.commontags_.~MapField();
    _impl_.measures_.~RepeatedPtrField();
    _impl_.version_.Destroy();
    _impl_.type_.Destroy();
    _impl_.pid_.Destroy();
    _impl_.ip_.Destroy();
}

void MeasureBatch::ArenaDtor(void* object) {
    MeasureBatch* _this = reinterpret_cast<MeasureBatch*>(object);
    _this->_impl_.commontags_.Destruct();
}
void MeasureBatch::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void MeasureBatch::Clear() {
    // @@protoc_insertion_point(message_clear_start:proto.MeasureBatch)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.commontags_.Clear();
    _impl_.measures_.Clear();
    _impl_.version_.ClearToEmpty();
    _impl_.type_.ClearToEmpty();
    _impl_.pid_.ClearToEmpty();
    _impl_.ip_.ClearToEmpty();
    _impl_.time_ = int64_t{0};
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasureBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // string version = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    auto str = _internal_mutable_version();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.MeasureBatch.version"));
                } else
                    goto handle_unusual;
                continue;
            // string type = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    auto str = _internal_mutable_type();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.MeasureBatch.type"));
                } else
                    goto handle_unusual;
                continue;
            // int64 time = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
                    _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else
                    goto handle_unusual;
                continue;
            // string pid = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
                    auto str = _internal_mutable_pid();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.MeasureBatch.pid"));
                } else
                    goto handle_unusual;
                continue;
            // string ip = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
                    auto str = _internal_mutable_ip();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.MeasureBatch.ip"));
                } else
                    goto handle_unusual;
                continue;
            // map<string, string> commonTags = 6;
            case 6:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(&_impl_.commontags_, ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
                } else
                    goto handle_unusual;
                continue;
            // repeated .proto.Measures measures = 7;
            case 7:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(), ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* MeasureBatch::_InternalSerialize(uint8_t* target,
                                          ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:proto.MeasureBatch)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // string version = 1;
    if (!this->_internal_version().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_version().data(),
            static_cast<int>(this->_internal_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.MeasureBatch.version");
        target = stream->WriteStringMaybeAliased(1, this->_internal_version(), target);
    }

    // string type = 2;
    if (!this->_internal_type().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_type().data(),
            static_cast<int>(this->_internal_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.MeasureBatch.type");
        target = stream->WriteStringMaybeAliased(2, this->_internal_type(), target);
    }

    // int64 time = 3;
    if (this->_internal_time() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
    }

    // string pid = 4;
    if (!this->_internal_pid().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_pid().data(),
            static_cast<int>(this->_internal_pid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.MeasureBatch.pid");
        target = stream->WriteStringMaybeAliased(4, this->_internal_pid(), target);
    }

    // string ip = 5;
    if (!this->_internal_ip().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_ip().data(),
            static_cast<int>(this->_internal_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.MeasureBatch.ip");
        target = stream->WriteStringMaybeAliased(5, this->_internal_ip(), target);
    }

    // map<string, string> commonTags = 6;
    if (!this->_internal_commontags().empty()) {
        using MapType = ::_pb::Map<std::string, std::string>;
        using WireHelper = MeasureBatch_CommonTagsEntry_DoNotUse::Funcs;
        const auto& map_field = this->_internal_commontags();
        auto check_utf8 = [](const MapType::value_type& entry) {
            (void)entry;
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                entry.first.data(),
                static_cast<int>(entry.first.length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "proto.MeasureBatch.CommonTagsEntry.key");
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                entry.second.data(),
                static_cast<int>(entry.second.length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "proto.MeasureBatch.CommonTagsEntry.value");
        };

        if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
            for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
                target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
                check_utf8(entry);
            }
        } else {
            for (const auto& entry : map_field) {
                target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
                check_utf8(entry);
            }
        }
    }

    // repeated .proto.Measures measures = 7;
    for (unsigned i = 0, n = static_cast<unsigned>(this->_internal_measures_size()); i < n; i++) {
        const auto& repfield = this->_internal_measures(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proto.MeasureBatch)
    return target;
}

size_t MeasureBatch::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proto.MeasureBatch)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // map<string, string> commonTags = 6;
    total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_commontags_size());
    for (::PROTOBUF_NAMESPACE_ID::Map<std::string, std::string>::const_iterator it
         = this->_internal_commontags().begin();
         it != this->_internal_commontags().end();
         ++it) {
        total_size += MeasureBatch_CommonTagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
    }

    // repeated .proto.Measures measures = 7;
    total_size += 1UL * this->_internal_measures_size();
    for (const auto& msg : this->_impl_.measures_) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // string version = 1;
    if (!this->_internal_version().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_version());
    }

    // string type = 2;
    if (!this->_internal_type().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_type());
    }

    // string pid = 4;
    if (!this->_internal_pid().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_pid());
    }

    // string ip = 5;
    if (!this->_internal_ip().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_ip());
    }

    // int64 time = 3;
    if (this->_internal_time() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasureBatch::_class_data_
    = {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, MeasureBatch::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MeasureBatch::GetClassData() const {
    return &_class_data_;
}


void MeasureBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                             const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<MeasureBatch*>(&to_msg);
    auto& from = static_cast<const MeasureBatch&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:proto.MeasureBatch)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_impl_.commontags_.MergeFrom(from._impl_.commontags_);
    _this->_impl_.measures_.MergeFrom(from._impl_.measures_);
    if (!from._internal_version().empty()) {
        _this->_internal_set_version(from._internal_version());
    }
    if (!from._internal_type().empty()) {
        _this->_internal_set_type(from._internal_type());
    }
    if (!from._internal_pid().empty()) {
        _this->_internal_set_pid(from._internal_pid());
    }
    if (!from._internal_ip().empty()) {
        _this->_internal_set_ip(from._internal_ip());
    }
    if (from._internal_time() != 0) {
        _this->_internal_set_time(from._internal_time());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasureBatch::CopyFrom(const MeasureBatch& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proto.MeasureBatch)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MeasureBatch::IsInitialized() const {
    return true;
}

void MeasureBatch::InternalSwap(MeasureBatch* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    _impl_.commontags_.InternalSwap(&other->_impl_.commontags_);
    _impl_.measures_.InternalSwap(&other->_impl_.measures_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.version_, lhs_arena, &other->_impl_.version_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.type_, lhs_arena, &other->_impl_.type_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.pid_, lhs_arena, &other->_impl_.pid_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.ip_, lhs_arena, &other->_impl_.ip_, rhs_arena);
    swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasureBatch::GetMetadata() const {
    return ::_pbi::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto_getter,
                                     &descriptor_table_MeasureBatches_2eproto_once,
                                     file_level_metadata_MeasureBatches_2eproto[2]);
}

// ===================================================================

Measures_LabelsEntry_DoNotUse::Measures_LabelsEntry_DoNotUse() {
}
Measures_LabelsEntry_DoNotUse::Measures_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena) : SuperType(arena) {
}
void Measures_LabelsEntry_DoNotUse::MergeFrom(const Measures_LabelsEntry_DoNotUse& other) {
    MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Measures_LabelsEntry_DoNotUse::GetMetadata() const {
    return ::_pbi::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto_getter,
                                     &descriptor_table_MeasureBatches_2eproto_once,
                                     file_level_metadata_MeasureBatches_2eproto[3]);
}

// ===================================================================

class Measures::_Internal {
public:
};

Measures::Measures(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    if (arena != nullptr && !is_message_owned) {
        arena->OwnCustomDestructor(this, &Measures::ArenaDtor);
    }
    // @@protoc_insertion_point(arena_constructor:proto.Measures)
}
Measures::Measures(const Measures& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
    Measures* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{/*decltype(_impl_.labels_)*/ {},
                        decltype(_impl_.measures_){from._impl_.measures_},
                        /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
    // @@protoc_insertion_point(copy_constructor:proto.Measures)
}

inline void Measures::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{/*decltype(_impl_.labels_)*/ {::_pbi::ArenaInitialized(), arena},
                        decltype(_impl_.measures_){arena},
                        /*decltype(_impl_._cached_size_)*/ {}};
}

Measures::~Measures() {
    // @@protoc_insertion_point(destructor:proto.Measures)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        ArenaDtor(this);
        return;
    }
    SharedDtor();
}

inline void Measures::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.labels_.Destruct();
    _impl_.labels_.~MapField();
    _impl_.measures_.~RepeatedPtrField();
}

void Measures::ArenaDtor(void* object) {
    Measures* _this = reinterpret_cast<Measures*>(object);
    _this->_impl_.labels_.Destruct();
}
void Measures::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void Measures::Clear() {
    // @@protoc_insertion_point(message_clear_start:proto.Measures)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.labels_.Clear();
    _impl_.measures_.Clear();
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // map<string, string> labels = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                } else
                    goto handle_unusual;
                continue;
            // repeated .proto.Measure measures = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_measures(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(), ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* Measures::_InternalSerialize(uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:proto.Measures)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // map<string, string> labels = 1;
    if (!this->_internal_labels().empty()) {
        using MapType = ::_pb::Map<std::string, std::string>;
        using WireHelper = Measures_LabelsEntry_DoNotUse::Funcs;
        const auto& map_field = this->_internal_labels();
        auto check_utf8 = [](const MapType::value_type& entry) {
            (void)entry;
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                entry.first.data(),
                static_cast<int>(entry.first.length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "proto.Measures.LabelsEntry.key");
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                entry.second.data(),
                static_cast<int>(entry.second.length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "proto.Measures.LabelsEntry.value");
        };

        if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
            for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
                target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
                check_utf8(entry);
            }
        } else {
            for (const auto& entry : map_field) {
                target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
                check_utf8(entry);
            }
        }
    }

    // repeated .proto.Measure measures = 2;
    for (unsigned i = 0, n = static_cast<unsigned>(this->_internal_measures_size()); i < n; i++) {
        const auto& repfield = this->_internal_measures(i);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(), target, stream);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proto.Measures)
    return target;
}

size_t Measures::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proto.Measures)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // map<string, string> labels = 1;
    total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
    for (::PROTOBUF_NAMESPACE_ID::Map<std::string, std::string>::const_iterator it = this->_internal_labels().begin();
         it != this->_internal_labels().end();
         ++it) {
        total_size += Measures_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
    }

    // repeated .proto.Measure measures = 2;
    total_size += 1UL * this->_internal_measures_size();
    for (const auto& msg : this->_impl_.measures_) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Measures::_class_data_
    = {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Measures::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Measures::GetClassData() const {
    return &_class_data_;
}


void Measures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<Measures*>(&to_msg);
    auto& from = static_cast<const Measures&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:proto.Measures)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
    _this->_impl_.measures_.MergeFrom(from._impl_.measures_);
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Measures::CopyFrom(const Measures& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proto.Measures)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Measures::IsInitialized() const {
    return true;
}

void Measures::InternalSwap(Measures* other) {
    using std::swap;
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    _impl_.labels_.InternalSwap(&other->_impl_.labels_);
    _impl_.measures_.InternalSwap(&other->_impl_.measures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Measures::GetMetadata() const {
    return ::_pbi::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto_getter,
                                     &descriptor_table_MeasureBatches_2eproto_once,
                                     file_level_metadata_MeasureBatches_2eproto[4]);
}

// ===================================================================

class Measure::_Internal {
public:
};

Measure::Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
    SharedCtor(arena, is_message_owned);
    // @@protoc_insertion_point(arena_constructor:proto.Measure)
}
Measure::Measure(const Measure& from) : ::PROTOBUF_NAMESPACE_ID::Message() {
    Measure* const _this = this;
    (void)_this;
    new (&_impl_) Impl_{decltype(_impl_.valuetype_){},
                        decltype(_impl_.name_){},
                        decltype(_impl_.desc_){},
                        decltype(_impl_.value_){},
                        decltype(_impl_.unit_){},
                        /*decltype(_impl_._cached_size_)*/ {}};

    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    _impl_.valuetype_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuetype_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_valuetype().empty()) {
        _this->_impl_.valuetype_.Set(from._internal_valuetype(), _this->GetArenaForAllocation());
    }
    _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_name().empty()) {
        _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
    }
    _impl_.desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (!from._internal_desc().empty()) {
        _this->_impl_.desc_.Set(from._internal_desc(), _this->GetArenaForAllocation());
    }
    ::memcpy(&_impl_.value_,
             &from._impl_.value_,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_) - reinterpret_cast<char*>(&_impl_.value_))
                 + sizeof(_impl_.unit_));
    // @@protoc_insertion_point(copy_constructor:proto.Measure)
}

inline void Measure::SharedCtor(::_pb::Arena* arena, bool is_message_owned) {
    (void)arena;
    (void)is_message_owned;
    new (&_impl_) Impl_{decltype(_impl_.valuetype_){},
                        decltype(_impl_.name_){},
                        decltype(_impl_.desc_){},
                        decltype(_impl_.value_){0},
                        decltype(_impl_.unit_){0},
                        /*decltype(_impl_._cached_size_)*/ {}};
    _impl_.valuetype_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuetype_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Measure::~Measure() {
    // @@protoc_insertion_point(destructor:proto.Measure)
    if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
        (void)arena;
        return;
    }
    SharedDtor();
}

inline void Measure::SharedDtor() {
    GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    _impl_.valuetype_.Destroy();
    _impl_.name_.Destroy();
    _impl_.desc_.Destroy();
}

void Measure::SetCachedSize(int size) const {
    _impl_._cached_size_.Set(size);
}

void Measure::Clear() {
    // @@protoc_insertion_point(message_clear_start:proto.Measure)
    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    _impl_.valuetype_.ClearToEmpty();
    _impl_.name_.ClearToEmpty();
    _impl_.desc_.ClearToEmpty();
    ::memset(&_impl_.value_,
             0,
             static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unit_) - reinterpret_cast<char*>(&_impl_.value_))
                 + sizeof(_impl_.unit_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Measure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
    while (!ctx->Done(&ptr)) {
        uint32_t tag;
        ptr = ::_pbi::ReadTag(ptr, &tag);
        switch (tag >> 3) {
            // string valueType = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
                    auto str = _internal_mutable_valuetype();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.Measure.valueType"));
                } else
                    goto handle_unusual;
                continue;
            // string name = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.Measure.name"));
                } else
                    goto handle_unusual;
                continue;
            // double value = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
                    _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                    ptr += sizeof(double);
                } else
                    goto handle_unusual;
                continue;
            // .proto.EnumUnit unit = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
                    uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                    _internal_set_unit(static_cast<::proto::EnumUnit>(val));
                } else
                    goto handle_unusual;
                continue;
            // string desc = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
                    auto str = _internal_mutable_desc();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "proto.Measure.desc"));
                } else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
        } // switch
    handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
            CHK_(ptr);
            ctx->SetLastTag(tag);
            goto message_done;
        }
        ptr = UnknownFieldParse(
            tag, _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(), ptr, ctx);
        CHK_(ptr != nullptr);
    } // while
message_done:
    return ptr;
failure:
    ptr = nullptr;
    goto message_done;
#undef CHK_
}

uint8_t* Measure::_InternalSerialize(uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:proto.Measure)
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    // string valueType = 1;
    if (!this->_internal_valuetype().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_valuetype().data(),
            static_cast<int>(this->_internal_valuetype().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.Measure.valueType");
        target = stream->WriteStringMaybeAliased(1, this->_internal_valuetype(), target);
    }

    // string name = 2;
    if (!this->_internal_name().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_name().data(),
            static_cast<int>(this->_internal_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.Measure.name");
        target = stream->WriteStringMaybeAliased(2, this->_internal_name(), target);
    }

    // double value = 3;
    static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
    double tmp_value = this->_internal_value();
    uint64_t raw_value;
    memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
    if (raw_value != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
    }

    // .proto.EnumUnit unit = 4;
    if (this->_internal_unit() != 0) {
        target = stream->EnsureSpace(target);
        target = ::_pbi::WireFormatLite::WriteEnumToArray(4, this->_internal_unit(), target);
    }

    // string desc = 5;
    if (!this->_internal_desc().empty()) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_desc().data(),
            static_cast<int>(this->_internal_desc().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "proto.Measure.desc");
        target = stream->WriteStringMaybeAliased(5, this->_internal_desc(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target,
            stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:proto.Measure)
    return target;
}

size_t Measure::ByteSizeLong() const {
    // @@protoc_insertion_point(message_byte_size_start:proto.Measure)
    size_t total_size = 0;

    uint32_t cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string valueType = 1;
    if (!this->_internal_valuetype().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_valuetype());
    }

    // string name = 2;
    if (!this->_internal_name().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_name());
    }

    // string desc = 5;
    if (!this->_internal_desc().empty()) {
        total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(this->_internal_desc());
    }

    // double value = 3;
    static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
    double tmp_value = this->_internal_value();
    uint64_t raw_value;
    memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
    if (raw_value != 0) {
        total_size += 1 + 8;
    }

    // .proto.EnumUnit unit = 4;
    if (this->_internal_unit() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this->_internal_unit());
    }

    return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Measure::_class_data_
    = {::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck, Measure::MergeImpl};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* Measure::GetClassData() const {
    return &_class_data_;
}


void Measure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
    auto* const _this = static_cast<Measure*>(&to_msg);
    auto& from = static_cast<const Measure&>(from_msg);
    // @@protoc_insertion_point(class_specific_merge_from_start:proto.Measure)
    GOOGLE_DCHECK_NE(&from, _this);
    uint32_t cached_has_bits = 0;
    (void)cached_has_bits;

    if (!from._internal_valuetype().empty()) {
        _this->_internal_set_valuetype(from._internal_valuetype());
    }
    if (!from._internal_name().empty()) {
        _this->_internal_set_name(from._internal_name());
    }
    if (!from._internal_desc().empty()) {
        _this->_internal_set_desc(from._internal_desc());
    }
    static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
    double tmp_value = from._internal_value();
    uint64_t raw_value;
    memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
    if (raw_value != 0) {
        _this->_internal_set_value(from._internal_value());
    }
    if (from._internal_unit() != 0) {
        _this->_internal_set_unit(from._internal_unit());
    }
    _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Measure::CopyFrom(const Measure& from) {
    // @@protoc_insertion_point(class_specific_copy_from_start:proto.Measure)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Measure::IsInitialized() const {
    return true;
}

void Measure::InternalSwap(Measure* other) {
    using std::swap;
    auto* lhs_arena = GetArenaForAllocation();
    auto* rhs_arena = other->GetArenaForAllocation();
    _internal_metadata_.InternalSwap(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.valuetype_, lhs_arena, &other->_impl_.valuetype_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.name_, lhs_arena, &other->_impl_.name_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
        &_impl_.desc_, lhs_arena, &other->_impl_.desc_, rhs_arena);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<PROTOBUF_FIELD_OFFSET(Measure, _impl_.unit_)
                                               + sizeof(Measure::_impl_.unit_)
                                               - PROTOBUF_FIELD_OFFSET(Measure, _impl_.value_)>(
        reinterpret_cast<char*>(&_impl_.value_), reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Measure::GetMetadata() const {
    return ::_pbi::AssignDescriptors(&descriptor_table_MeasureBatches_2eproto_getter,
                                     &descriptor_table_MeasureBatches_2eproto_once,
                                     file_level_metadata_MeasureBatches_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
} // namespace arms_metrics
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::proto::MeasureBatches* Arena::CreateMaybeMessage<::proto::MeasureBatches>(Arena* arena) {
    return Arena::CreateMessageInternal<::proto::MeasureBatches>(arena);
}
template <>
PROTOBUF_NOINLINE ::proto::MeasureBatch_CommonTagsEntry_DoNotUse*
Arena::CreateMaybeMessage<::proto::MeasureBatch_CommonTagsEntry_DoNotUse>(Arena* arena) {
    return Arena::CreateMessageInternal<::proto::MeasureBatch_CommonTagsEntry_DoNotUse>(arena);
}
template <>
PROTOBUF_NOINLINE ::proto::MeasureBatch* Arena::CreateMaybeMessage<::proto::MeasureBatch>(Arena* arena) {
    return Arena::CreateMessageInternal<::proto::MeasureBatch>(arena);
}
template <>
PROTOBUF_NOINLINE ::proto::Measures_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage<::proto::Measures_LabelsEntry_DoNotUse>(Arena* arena) {
    return Arena::CreateMessageInternal<::proto::Measures_LabelsEntry_DoNotUse>(arena);
}
template <>
PROTOBUF_NOINLINE ::proto::Measures* Arena::CreateMaybeMessage<::proto::Measures>(Arena* arena) {
    return Arena::CreateMessageInternal<::proto::Measures>(arena);
}
template <>
PROTOBUF_NOINLINE ::proto::Measure* Arena::CreateMaybeMessage<::proto::Measure>(Arena* arena) {
    return Arena::CreateMessageInternal<::proto::Measure>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
